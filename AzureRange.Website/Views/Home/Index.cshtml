@using AzureRange

@{ 
    ViewBag.Title = "Azure Range - BETA";
    var regions = (List<AzureRegion>)ViewData["Regions"];
}

<div>
    <div id="headerAndLogo">
        <img id="logo" src="~/Content/shield_100.png" />
        <h1>Azure Range</h1>
        <b>BETA v0.2</b> - Do not use on production unless you know what you do.
        <p>
            Processed <b>@(((List<IPPrefix>)ViewData["IPPrefixInput"]).Count())</b>
            IPv4 prefixes from <a target="_blank" href="https://www.microsoft.com/en-ca/download/confirmation.aspx?id=41653">
                Microsoft Azure Datacenter IP Prefixes
            </a>.<br />

            Found <b>@Model.Count</b> complementary subnets, which is
            @if (Model.Count <= 4000)
            {
                <span>less than 4000 routes: a <u>Standard</u> ER Circuit is sufficient.</span>
            }
            else
            {
                <span>more than 4000 routes: requires a <u>Premium</u> ER Circuit.</span>
            }<br />
            Code can be found on <a href="https://github.com/fchapleau/AzureRange">GitHub</a>.
        </p>
    </div>
    

    <div id="generation">
        <form action="generate" method="get">
            <div id="geographyselection">
                @foreach (var geography in regions.Select(r => r.Geography).Distinct().OrderBy(g => g))
                {
                    <div class="geography">
                        <div class="geographyLabel">@geography</div>
                        @foreach (var region in regions.Where(r => r.Geography == geography).OrderBy(r => r.Name))
                        {
                            <div class="region">
                                <label>
                                    <input type="checkbox" name="region" value="@region.Id" />&nbsp;@region.Name
                                </label>
                            </div>
                        }
                    </div>
                }

                <div>
                    Output format:
                    <select id="outputformat" name="outputformat">
                        <option value="cisco-ios">Cisco IOS/IOS XE</option>
                        <option value="cisco-asa">Cisco ASA</option>
                        <option value="list-subnet-masks">List of subnet/mask</option>
                        <option value="list-cidr">List of CIDR</option>
                        <option value="csv-subnet-masks">CSV list of subnet/mask</option>
                        <option value="csv-cidr">CSV list of CIDR</option>
                    </select>
                    <input id="Download" type="submit" name="command" value="Download Output"/>

                </div>
            </div>

        </form>
        <p></p>
        <button id="showContent">Display Output Below</button>
        <button id="hideContent" hidden>Hide Results</button>
        <p></p>
        
    </div>
    <p></p>

    <div id="TextResponse" style="width:100%">
        @*<textarea id="tbox" style="width:100%;height:100%;max-width:inherit" hidden>Loading...</textarea>*@
        <textarea id="tbox" style="width:100%;max-width:inherit;height:300px" hidden>Loading...</textarea>
    </div>

    <div id="backgroundText">
        <h3>Background</h3>
        <p style="margin-left:50px">
            Often because of security reasons, many customers choose to enable « forced tunneling » when it comes to ExpressRoute
            configuration because they wish to have all traffic that isn’t destined to the local VNet resources to be inspected by
            their local on premise gear, appliances or devices.
        </p>
        <p style="margin-left:50px">
            Enabling forced tunneling allows customer to do just that, but that includes all traffic, <u>
                including traffic that is
                destined to Azure Public resources, including but not limited to, SQL Azure or other Azure public resources
            </u>.
        </p>

        <h3>Solution</h3>
        <p style="margin-left:50px">
            While not the only possible solution, one solution is to do a “selective” forced tunneling, meaning that not ALL traffic
            is being redirected towards on premise but only traffic that isn’t destined to the resources required by the applications
            on the VNet.
        </p>

        <h3>Details</h3>
        <p style="margin-left:50px">
            Advertising 0.0.0.0/0 on the BGP sessions with the Microsoft Enterprise Edge routers achieves the forced tunneling.
            To ensure that not all (a.k.a. 0.0.0.0/0) traffic is sent back on premise, you need to find which prefixes need to be
            routed back on premise (instead of 0.0.0.0/0) and that list needs to exclude the prefixes you want to keep for local
            routing “in the cloud”.
        </p>

        <h3>Implementation</h3>
        <p style="margin-left:50px">
            How you implement that is highly dependent on your telecommunication equipment but a sample below describes one way of
            achieving it using Cisco routers, and as of today, we exclude ALL public IPs that Microsoft uses in their datacenters
            (as based on the list that you can download <a href="https://www.microsoft.com/en-ca/download/confirmation.aspx?id=41653">here</a>).
        </p>

        <h3>Disclaimer</h3>
        <p style="margin-left:50px">
            <b>
                Use at your own risks on your routers. Like any production network, you need to understand fully the impact of using
                these configuration lines into your production routers. The authors provide no guarantee on that code, implicit or
                explicit and aren't liable for any consequence, including loss of productivity, profits, etc.
            </b>
        </p>
    </div>
    

    <div>
        <h3>Sample Code (Cisco IOS)</h3>
        <p style="margin-left:50px">
            Inside a Cisco router peering with MSEE routers, you <b>could</b> have a configuration similar to :
        </p>
        <div id="routes" style="margin-left:50px">
            <code>
                router bgp &lt;<i>YOUR ASN</i>&gt;<br />
                &nbsp;bgp log-neighbor-changes<br />
                &nbsp;neighbor &lt;<i>PRIVATE_PEERING_EXPRESSROUTE_IP</i>&gt; remote-as 12076 ! ASN for ExpressRoute = 12076<br />
                &nbsp;!<br />
                &nbsp;address-family ipv4<br />
                &nbsp;&nbsp;<b>redistribute static</b> ! <b>this is one way to inject the networks below</b><br />
                &nbsp;&nbsp;neighbor &lt;<i>PRIVATE_PEERING_EXPRESSROUTE_IP</i>&gt; activate<br />
                &nbsp;&nbsp;no auto-summary<br />
                &nbsp;&nbsp;no synchronization<br />
                &nbsp;exit-address-family<br />
                !<br />
                ip route 1.0.0.0 255.0.0.0 null0<br />
                ip route 2.0.0.0 254.0.0.0 null0<br />
                ip route 4.0.0.0 252.0.0.0 null0<br />
                ip route 8.0.0.0 254.0.0.0 null0<br />
                ip route 11.0.0.0 255.0.0.0 null0<br />
                ip route 12.0.0.0 255.0.0.0 null0<br />
                ip route 13.0.0.0 255.192.0.0 null0<br />
                [ etc... ]<br />
            </code>
        </div>
    </div>

</div>
